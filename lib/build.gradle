
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "io.freefair.lombok" version "6.5.0"
    id 'signing'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group 'com.thales.id.jakarta.cadp.demo'
version '1.2-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8


jar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA','META-INF/*.MF'
    archiveBaseName = "THALES.ID.JAKARTA.CADP.LIB"
    manifest { attributes 'Main-Class': 'com.thales.id.jakarta.cadp.lib.demo.Library' }
    zip64 = true
    //Remove these, if you wanted to have only create a library with no dependencies
    //with no dependencies means, you may upload another jar inside databricks
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations.implementation.setCanBeResolved(true)
    configurations.api.setCanBeResolved(true)
    doFirst {
        from(configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) })
    }

    /*
    doLast {
        def pkAlias =  'CADP_JAVA_LIB' //depend on how you create a key
        def keystoreFileName = 'test_app_sign.jks'
        def storePassword = 'password'
        def keyPassword = 'password'
        def keystoreType = 'RSA'
        def libsFilePath = "$buildDir/libs"
        def libFiles = files { file(libsFilePath).listFiles() }
        def destDir = "$buildDir/signed"
        def signedDir = new File(destDir)
        signedDir.mkdirs()

        def passwd = "password"
        def app_alias = "CADP_JAVA_LIB"
        def jks_file = "/Users/sandy/Documents/Projects/Python/pySpark/test_app_sign.jks"
        def exec_line = "jarsigner -keystore " + jks_file + " -storepass " + passwd + " -keypass "+ passwd + " " + jar.archiveFile + " " + app_alias
        print exec_line
        exec_line.execute()
    }
    */
}


dependencies {

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'


    //log4j
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    //lombok
    //compileOnly 'org.projectlombok:lombok'
    //annotationProcessor 'org.projectlombok:lombok'



    // Sandy : For running spark basics
    implementation 'org.apache.spark:spark-sql_2.12:3.0.0'
    implementation 'org.codehaus.janino:janino:3.0.8'


    //Sandy : define local libs folder to call our CADP
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Sandy : CADP dependencies
    implementation 'org.apache.commons:commons-collections4:4.0'
    implementation 'com.google.guava:guava-testlib:31.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.9'


    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.71'
    implementation 'org.bouncycastle:bcutil-jdk15on:1.70'


    //Not CADP Deps
    implementation 'commons-codec:commons-codec:1.9'

    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'


}

test {
    useJUnitPlatform()
}